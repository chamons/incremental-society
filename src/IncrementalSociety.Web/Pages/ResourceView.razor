@using System.Collections.Immutable

@using IncrementalSociety.Model
@using IncrementalSociety.Json
@using IncrementalSociety.Web.Services
@using IncrementalSociety.Utilities

@inject GameService GameService
@inject StyleService StyleService

<h1>Resources</h1>

<ul id="resource-list">
	@foreach (var resource in Resources)
	{
		double storage = GetResourceStroage (GameService.State, resource.Name);
		if (storage > 0) {
			<li class="d-flex align-items-center resource-list-item">
				<img class="img-fluid resource-image" src="@StyleService.GetImageFilename(resource)" />
				@resource.Name: @(GetResourceCount (GameService.State.Resources, resource.Name)) / @storage
				<div class="resource-delta @StyleService.GetResourceDeltaClass(GetResourceCount (NextTickResources, resource.Name))">(@(GetResourceCount (NextTickResources, resource.Name)))</div>
			</li>
		}
	}
</ul>

@functions {
	public IEnumerable<ResourceDeclaration> Resources => GameService.Loader.Resources.Resources;

	public Resources NextTickResources;
	public Resources ResourceStorage;

	// Round to three places for display
	public double GetResourceCount (Resources resources, string name) => Math.Round (resources[name], 3);
	public double GetResourceStroage (GameState state, string name) => ResourceStorage[name];

	protected override void OnInit ()
	{
		GameService.CurrentUIStateChanged += (o, e) =>
		{
			Update ();
			StateHasChanged ();
		};

		Update ();
	}

	void Update ()
	{
		NextTickResources = GameService.GetNextTickResources ();
		ResourceStorage = GameService.GetResourceStorage ();
	}
}
