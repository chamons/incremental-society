@using  IncrementalSociety.Web.Services
@using  IncrementalSociety.Model

<div class="region-view" onclick="@OnAreaClick" >
	<div class="collapse @(Expanded ? "hide" : "show")" style="background-color:@BackgroundColor;" >
		<div class="area-image-small-container" onclick="@OnAreaImageClick">
			<img class="area-image" src="images/@(Area.Type).png" alt="@Area.Type" />
			<span>@Area.Buildings.Length/@GameService.RegionCapacity</span>
		</div>
	</div>

	<div class="area-more-info collapse @(Expanded ? "show" : "hide")" style="background-color:@BackgroundColor;"
		<div class="area-more-info-header">
			<img class="area-image" src="images\\@(Area.Type).png" onclick="@OnAreaImageClick" />
			<p>@Area.Type</p>
		</div>
		@for (int i = 0; i < GameService.RegionCapacity; ++i)
		{
			if (i < Area.Buildings.Length)
			{
				<AreaBuilding Area=@Area Index=@i GameService=@GameService Building="@Area.Buildings[i]" />
			}
			else
			{
				<AreaBuilding GameService=@GameService />
			}
		}
	</div>
</div>

@functions {
	[Parameter]
	Area Area { get; set; }

	[Parameter]
	GameService GameService { get; set; }

	bool Expanded;

	bool HasRoom => Area.Buildings.Length < GameService.RegionCapacity;

	void OnAreaImageClick ()
	{
		switch (GameService.CurrentUIState) 
		{
			case GameUIState.SelectForBuild:
				OnAreaClick ();
				break;
			default:
				Expanded = !Expanded;
				StateHasChanged ();
				break;
		}
	}

	string BackgroundColor
	{
		get
		{
			switch (GameService.CurrentUIState) 
			{
				case GameUIState.SelectForBuild:
					return HasRoom ? "gray" : "white"; 
				default:
					return "white";	
			}
		}
	}
	
	void OnAreaClick ()
	{
		switch (GameService.CurrentUIState) 
		{
			case GameUIState.SelectForBuild:
				if (HasRoom) {
					GameService.OnBuildSelection (Area);
				}
				break;
		}
	}

}
