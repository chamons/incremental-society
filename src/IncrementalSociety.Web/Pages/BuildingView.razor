@using System.Collections.Immutable
@using IncrementalSociety.Web.Services
@using IncrementalSociety.Utilities

@inject GameService GameService
@inject StyleService StyleService

<div>
	<div class="d-flex flex-column building" style="background-color:@BackgroundColor;" onclick=@OnClick>
		<p class="building-title" >@BuildingName</p>
		@if (HasBuilding) {
			@if (Resources.AsNotNull ().Any ()) {
				<div class="d-flex flex-wrap resource-line">
				@foreach (var res in Resources.AsNotNull ()) {
					<div class="building-resource d-flex align-items-center">
						<img class="resource-image" src="@StyleService.GetImageFilename(@res.Key)" />
						<div class="@GetResourceValueClass(@res.Value)">@res.Value</div>
					</div>
				}
				</div>
			}
			@foreach (var conversion in Conversions.AsNotNull ()) {
				<div class="d-flex flex-wrap resource-line" style="background-color:@ConversionBackgroundColor(conversion.Enabled);">
				@foreach (var res in conversion.Resources) {
					<div class="building-resource d-flex align-items-center">
						<img class="resource-image" src="@StyleService.GetImageFilename(@res.Key)" />
						<div class="@GetResourceValueClass(@res.Value)">@res.Value</div>
					</div>
				}
				</div>
			}
		}
	</div>
</div>

@functions {
	[Parameter]
	string BuildingName { get; set; }
	
	[Parameter]
	ImmutableDictionary<string, double> Resources { get; set; }
	
	[Parameter]
	List<(bool Enabled, ImmutableDictionary<string, double> Resources)> Conversions { get; set; }
	
	[Parameter]
	string BackgroundColor { get; set; }
	
	[Parameter]
	Action OnClick { get; set; }
	
	[Parameter]
	bool ColorResourcesAsDelta { get; set; }

	bool HasBuilding => !String.IsNullOrEmpty (BuildingName);
	string GetResourceValueClass (double value) => ColorResourcesAsDelta ? StyleService.GetResourceDeltaClass (value) : "";
	string ConversionBackgroundColor (bool enabled) => enabled ? "white" : "darkred";
}
