@using System.Collections.Immutable
@using IncrementalSociety.Web.Services
@using IncrementalSociety.Utilities

@inject GameService GameService
@inject StyleService StyleService

<div>
	<div class="d-flex flex-column building @BuildingStyleClass" onclick=@OnClick>
		<p class="building-title">@BuildingName</p>
		@if (HasBuilding) {
			@if (Resources.AsNotNull ().Any ()) {
				<div class="d-flex flex-wrap resource-line">
				@foreach (var res in Resources.AsNotNull ()) {
					<div class="building-resource d-flex align-items-center">
						<img class="resource-image" src="@StyleService.GetImageFilename(@res.ResourceName)" />
						<div class="@GetResourceValueClass(@res.Value)">@res.Value</div>
					</div>
				}
				</div>
			}
			@if (SecondaryResources.AsNotNull ().Any ()) {
				<div class="d-flex flex-wrap resource-line secondary-resources">
				@foreach (var res in SecondaryResources.AsNotNull ()) {
					<div class="building-resource d-flex align-items-center">
						<img class="resource-image" src="@StyleService.GetImageFilename(@res.ResourceName)" />
						<div class="@GetResourceValueClass(@res.Value)">@res.Value</div>
					</div>
				}
				</div>
			}
			@foreach (var conversion in Conversions.AsNotNull ()) {
				<div class="d-flex flex-wrap resource-line @ConversionClass(conversion.Enabled)">
				@foreach (var res in conversion.Resources) {
					<div class="building-resource d-flex align-items-center">
						<img class="resource-image" src="@StyleService.GetImageFilename(@res.ResourceName)" />
						<div class="@GetResourceValueClass(@res.Value)">@res.Value</div>
					</div>
				}
				</div>
			}
		}
	</div>
</div>

@functions {
	[Parameter]
	string BuildingName { get; set; }

	[Parameter]
	Resources Resources { get; set; }

	[Parameter]
	List<(bool Enabled, Resources Resources)> Conversions { get; set; }

	[Parameter]
	Resources SecondaryResources { get; set; }

	[Parameter]
	bool Disabled { get; set; }

	[Parameter]
	Action OnClick { get; set; }

	[Parameter]
	bool ColorResourcesAsDelta { get; set; }

	bool HasBuilding => !String.IsNullOrEmpty (BuildingName);
	string GetResourceValueClass (double value) => ColorResourcesAsDelta ? StyleService.GetResourceDeltaClass (value) : "";
	string ConversionClass (bool enabled) => enabled ? "conversion-enabled" : "conversion-disabled";
	string BuildingStyleClass => Disabled ? "disabled" : "";

	protected override void OnInit ()
	{
		GameService.CurrentUIStateChanged += (o, e) => StateHasChanged ();
	}
}
