@using System.Collections.Immutable

@using IncrementalSociety.Web.Services
@using IncrementalSociety.Model

@inject GameService GameService
@inject StyleService StyleService
@inject BuildingService BuildingService

<div>
	<BuildingView
		BuildingName="@Building"
		Resources="@BuildingResources"
		Conversions="@Conversions"
		Disabled="@IsDisabled"
		OnClick="OnClick"
		ColorResourcesAsDelta=true />
</div>

@functions {
	[Parameter]
	Area Area { get; set; }

	[Parameter]
	int Index { get; set; }

	[Parameter]
	string Building { get; set; }

	bool HasBuilding => !String.IsNullOrEmpty (Building);
	bool CanDestory => HasBuilding && BuildingService.CanDestoryBuilding (Building);

	Resources BuildingResources => HasBuilding ? GameService.Engine.GetBuildingResources (GameService.State, Building) : null;
	bool IsConversionEnabled (string name) => GameService.Engine.IsConversionEnabled (GameService.State, name);

	protected override void OnInit ()
	{
		GameService.CurrentUIStateChanged += (o, e) => StateHasChanged ();
	}

	List<(bool Enabled, Resources Resources)> Conversions
	{
		get
		{
			if (HasBuilding) {
				var allConversions = new List<(bool Enabled, Resources Resources)> ();
				foreach (var conversion in GameService.Engine.GetBuildingConversionResources (Building)) {
					allConversions.Add ((IsConversionEnabled (conversion.Name), conversion.Resources));
				}
				return allConversions;
			}
			return null;
		}
	}

	bool IsDisabled
	{
		get
		{
			switch (GameService.CurrentUIState)
			{
				case GameUIState.SelectBuildingToDestory:
					return CanDestory;
				default:
					return false;
			}
		}
	}

	void OnClick ()
	{
		switch (GameService.CurrentUIState)
		{
			case GameUIState.SelectBuildingToDestory:
				if (CanDestory) {
					BuildingService.OnDestroySelection (Area, Index);
				}
				break;
		}
	}
}
