@using System.Collections.Immutable

@using IncrementalSociety.Web.Services
@using IncrementalSociety.Model
@using IncrementalSociety.Json

@inject IJSRuntime JsRuntime;
@inject GameService GameService

<div class="modal fade" id="selectResearchModal" tabindex="-1" role="dialog">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			@if (Enabled)
			{
				<div class="modal-header">
					<h5 class="modal-title">Research</h5>
					<button type="button" class="close" onclick=@OnCloseButton><span>&times;</span></button>
				</div>
				<div class="modal-body">
					@foreach (var researchItem in ResearchOptions) {
						var specializations = GameService.Engine.GetResearchSpecializations (researchItem.Name);
						if (specializations.Count == 0) {
							<ResearchView
								ResearchName=@researchItem.Name
								Description=@researchItem.Description
								Resources=@researchItem.Cost
								OnSelection=@(() => OnSelection (@researchItem.Name))
							/>
						}
						else {
							<div class="research-title">@researchItem.Name</div>
						}

					}
				</div>
			}
		</div>
	</div>
</div>

@functions {
	bool Enabled => ResearchOptions != null;

	List<ResearchItem> ResearchOptions;

	bool CanResearch (string techName) => GameService.Engine.CanResearch (GameService.State, techName);

	protected override void OnInit ()
	{
		GameService.CurrentUIStateChanged += OnUIStateChanged;
	}

	protected override void OnAfterRender ()
	{
		// Register for bootstrap notifications if not already done
		((IJSInProcessRuntime)JsRuntime).Invoke<object> ("InitResearchModal", new DotNetObjectRef(this));
	}

	void OnUIStateChanged (object sender, GameUIStateChangedEventArgs args)
	{
		// If we're just transisitioning to the dialog, consume the options and show it
		if (GameService.CurrentUIState == GameUIState.ShowResearchSelectDialog) {
			ResearchOptions = GameService.Engine.GetCurrentResearchOptions (GameService.State);
			StateHasChanged ();
			((IJSInProcessRuntime)JsRuntime).Invoke<object> ("ShowResearchModal");
		}
		StateHasChanged ();
	}

	void OnSelection (string techName)
	{
		if (CanResearch (techName)) {
			GameService.ApplyAction (ActionService.ResearchText, new string[] { techName });
			Dismiss (true);
		}
	}

	void Dismiss (bool closeDialog = false)
	{
		ResearchOptions = null;
		GameService.SetUIState (GameUIState.Default);
		if (closeDialog) {
			((IJSInProcessRuntime)JsRuntime).Invoke<object> ("DismissResearchModal");
		}
	}

	// Triggered with pressing the "X" button
	void OnCloseButton ()
	{
		Dismiss (true);
	}

	// Triggered when clicking off modal from bootstrap
	[JSInvokable]
	public void OnResearchModalDismissed ()
	{
		Dismiss ();
	}
}
